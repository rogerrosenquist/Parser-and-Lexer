
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNleftORELSEleftANDALSOleftNOTleftLTLEQEQUNEQGEQGTrightCONSleftINleftPLUSMINUSleftTIMESDIVIDEDIVMODrightUMINUSrightEXPONENTleftLBRACKETRBRACKETleftHASHTAGleftCOMMAleftLPARENRPARENANDALSO ASSIGN COMMA CONS DIV DIVIDE ELSE EQU EXPONENT FALSE FUNCTION GEQ GT HASHTAG IF IN INTNUM LBLOCK LBRACKET LEQ LPAREN LT MINUS MOD NAME NEQ NOT ORELSE PLUS PRINT RBLOCK RBRACKET REALNUM RPAREN SEMICOLON STRING TIMES TRUE WHILE program : functions block program : block  functions : function functions \n                        | function  function : FUNCTION NAME LPAREN RPAREN ASSIGN block expression SEMICOLON  function : FUNCTION NAME LPAREN NAME function_withpara_tail function_withpara_tail : COMMA NAME function_withpara_tail  function_withpara_tail : RPAREN ASSIGN block expression SEMICOLON  block : LBLOCK statements RBLOCK  block : LBLOCK RBLOCK  statements : statement statements \n                        | statement  statement : assign_statement\n                        | print_statement  \n                        | if_statement \n                        | if_else_statement \n                        | while_loop_statement  assign_statement : NAME ASSIGN expression SEMICOLON assign_statement : NAME list_expr ASSIGN expression SEMICOLON print_statement : PRINT LPAREN expression RPAREN SEMICOLON if_statement : IF LPAREN expression RPAREN block if_else_statement : IF LPAREN expression RPAREN block ELSE block while_loop_statement : WHILE LPAREN expression RPAREN block  expression : number_expr\n                        | name_expr\n                        | uminus_expr\n                        | boolean_expr\n                        | string_expr\n                        | tuple_expr\n                        | list_expr\n                        | paren_expr\n                        | lop_single_expr \n                        | midop_double_expr \n                        | indexing_expr\n                        | tuple_indexing_expr \n                        | function_call_expr  name_expr : NAME  function_call_expr : NAME LPAREN RPAREN  function_call_expr : NAME LPAREN expression function_call_expr_tail  function_call_expr_tail : COMMA expression function_call_expr_tail  function_call_expr_tail : RPAREN uminus_expr : MINUS expression %prec UMINUS number_expr : INTNUM\n                        | REALNUM  boolean_expr : TRUE\n                        | FALSE  string_expr : STRING tuple_expr : LPAREN p_tuple_expr_tail  p_tuple_expr_tail : expression COMMA p_tuple_expr_tail\n                        | expression COMMA expression RPAREN\n                        | expression COMMA RPAREN  list_expr : LBRACKET list_expr_body RBRACKET \n                        | LBRACKET RBRACKET list_expr_body : expression COMMA list_expr_body\n                        | expression \n                        | expression COMMA paren_expr : LPAREN expression RPAREN lop_single_expr : NOT expression  midop_double_expr : expression ORELSE expression \n                        | expression ANDALSO expression\n                        | expression LT expression\n                        | expression LEQ expression\n                        | expression EQU expression\n                        | expression NEQ expression\n                        | expression GEQ expression\n                        | expression GT expression\n                        | expression PLUS expression\n                        | expression MINUS expression\n                        | expression TIMES expression\n                        | expression DIVIDE expression\n                        | expression DIV expression\n                        | expression MOD expression\n                        | expression EXPONENT expression \n                        | expression IN expression\n                        | expression CONS expressionindexing_expr : expression list_exprtuple_indexing_expr : HASHTAG number_expr expression'
    
_lr_action_items = {'LBLOCK':([0,2,4,8,93,94,95,98,127,135,136,143,145,],[5,5,-4,-3,5,5,-6,5,5,5,-7,-5,-8,]),'FUNCTION':([0,4,95,136,143,145,],[6,6,-6,-7,-5,-8,]),'$end':([1,3,7,10,22,],[0,-2,-1,-10,-9,]),'RBLOCK':([5,9,10,11,12,13,14,15,16,22,23,65,121,123,124,125,141,],[10,22,-10,-12,-13,-14,-15,-16,-17,-9,-11,-18,-19,-20,-21,-23,-22,]),'NAME':([5,6,10,11,12,13,14,15,16,22,24,26,27,28,29,30,46,47,48,52,53,55,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,96,119,121,123,124,125,128,130,137,141,],[17,21,-10,17,-13,-14,-15,-16,-17,-9,31,31,31,31,31,62,-43,-44,31,31,31,31,31,-18,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,126,31,-19,-20,-21,-23,31,31,31,-22,]),'PRINT':([5,10,11,12,13,14,15,16,22,65,121,123,124,125,141,],[18,-10,18,-13,-14,-15,-16,-17,-9,-18,-19,-20,-21,-23,-22,]),'IF':([5,10,11,12,13,14,15,16,22,65,121,123,124,125,141,],[19,-10,19,-13,-14,-15,-16,-17,-9,-18,-19,-20,-21,-23,-22,]),'WHILE':([5,10,11,12,13,14,15,16,22,65,121,123,124,125,141,],[20,-10,20,-13,-14,-15,-16,-17,-9,-18,-19,-20,-21,-23,-22,]),'ELSE':([10,22,124,],[-10,-9,135,]),'INTNUM':([10,22,24,26,27,28,29,46,47,48,52,53,54,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,46,46,46,46,46,-43,-44,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'REALNUM':([10,22,24,26,27,28,29,46,47,48,52,53,54,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,47,47,47,47,47,-43,-44,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'MINUS':([10,22,24,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,128,129,130,131,132,133,134,137,138,139,140,142,144,],[-10,-9,48,48,48,48,48,-37,75,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,48,-45,-46,-47,48,48,48,-53,75,75,75,75,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-76,-42,-48,75,75,48,75,-52,48,-38,75,75,75,75,75,75,75,75,75,-67,-68,-69,-70,-71,-72,-73,75,75,-57,48,-77,48,-39,48,-41,75,-49,-51,48,75,75,-50,75,-40,]),'TRUE':([10,22,24,26,27,28,29,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,49,49,49,49,49,-43,-44,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([10,22,24,26,27,28,29,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,50,50,50,50,50,-43,-44,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'STRING':([10,22,24,26,27,28,29,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,51,51,51,51,51,-43,-44,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'LPAREN':([10,18,19,20,21,22,24,26,27,28,29,31,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,27,28,29,30,-9,52,52,52,52,52,64,-43,-44,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'LBRACKET':([10,17,22,24,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,59,60,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,128,129,130,131,132,133,134,137,138,139,140,142,144,],[-10,26,-9,26,26,26,26,26,-37,26,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,26,-45,-46,-47,26,26,26,-53,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-76,26,-48,26,26,26,26,-52,26,-38,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-57,26,-77,26,-39,26,-41,26,-49,-51,26,26,26,-50,26,-40,]),'NOT':([10,22,24,26,27,28,29,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,53,53,53,53,53,-43,-44,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'HASHTAG':([10,22,24,26,27,28,29,46,47,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[-10,-9,54,54,54,54,54,-43,-44,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ASSIGN':([17,25,57,63,90,97,],[24,55,-53,98,-52,127,]),'RBRACKET':([26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,56,57,58,83,84,85,87,90,91,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,129,131,133,134,140,144,],[57,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,90,-53,-55,-76,-42,-48,-58,-52,-56,-38,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-54,-39,-41,-49,-51,-50,-40,]),'RPAREN':([30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,59,60,61,62,64,83,84,85,86,87,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,129,131,132,133,134,139,140,144,],[63,-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,92,93,94,97,99,-76,-42,-48,118,-58,-52,-38,131,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,134,-77,97,-39,-41,140,-49,-51,131,-50,-40,]),'SEMICOLON':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,83,84,85,87,89,90,92,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,133,134,138,140,142,144,],[-37,65,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,-76,-42,-48,-58,121,-52,123,-38,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,-49,-51,143,-50,145,-40,]),'ORELSE':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,66,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,66,66,66,66,-76,-42,-48,66,-58,66,-52,-38,66,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,66,-49,-51,66,66,-50,66,-40,]),'ANDALSO':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,67,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,67,67,67,67,-76,-42,-48,67,-58,67,-52,-38,67,67,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,67,-49,-51,67,67,-50,67,-40,]),'LT':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,68,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,68,68,68,68,-76,-42,-48,68,68,68,-52,-38,68,68,68,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,68,-49,-51,68,68,-50,68,-40,]),'LEQ':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,69,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,69,69,69,69,-76,-42,-48,69,69,69,-52,-38,69,69,69,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,69,-49,-51,69,69,-50,69,-40,]),'EQU':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,70,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,70,70,70,70,-76,-42,-48,70,70,70,-52,-38,70,70,70,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,70,-49,-51,70,70,-50,70,-40,]),'NEQ':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,71,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,71,71,71,71,-76,-42,-48,71,71,71,-52,-38,71,71,71,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,71,-49,-51,71,71,-50,71,-40,]),'GEQ':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,72,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,72,72,72,72,-76,-42,-48,72,72,72,-52,-38,72,72,72,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,72,-49,-51,72,72,-50,72,-40,]),'GT':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,73,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,73,73,73,73,-76,-42,-48,73,73,73,-52,-38,73,73,73,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,-39,-41,73,-49,-51,73,73,-50,73,-40,]),'PLUS':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,74,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,74,74,74,74,-76,-42,-48,74,74,74,-52,-38,74,74,74,74,74,74,74,74,74,-67,-68,-69,-70,-71,-72,-73,74,74,-57,-77,-39,-41,74,-49,-51,74,74,-50,74,-40,]),'TIMES':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,76,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,76,76,76,76,-76,-42,-48,76,76,76,-52,-38,76,76,76,76,76,76,76,76,76,76,76,-69,-70,-71,-72,-73,76,76,-57,-77,-39,-41,76,-49,-51,76,76,-50,76,-40,]),'DIVIDE':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,77,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,77,77,77,77,-76,-42,-48,77,77,77,-52,-38,77,77,77,77,77,77,77,77,77,77,77,-69,-70,-71,-72,-73,77,77,-57,-77,-39,-41,77,-49,-51,77,77,-50,77,-40,]),'DIV':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,78,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,78,78,78,78,-76,-42,-48,78,78,78,-52,-38,78,78,78,78,78,78,78,78,78,78,78,-69,-70,-71,-72,-73,78,78,-57,-77,-39,-41,78,-49,-51,78,78,-50,78,-40,]),'MOD':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,79,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,79,79,79,79,-76,-42,-48,79,79,79,-52,-38,79,79,79,79,79,79,79,79,79,79,79,-69,-70,-71,-72,-73,79,79,-57,-77,-39,-41,79,-49,-51,79,79,-50,79,-40,]),'EXPONENT':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,80,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,80,80,80,80,-76,80,-48,80,80,80,-52,-38,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-57,-77,-39,-41,80,-49,-51,80,80,-50,80,-40,]),'IN':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,81,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,81,81,81,81,-76,-42,-48,81,81,81,-52,-38,81,81,81,81,81,81,81,81,81,-67,-68,-69,-70,-71,-72,-73,-74,81,-57,-77,-39,-41,81,-49,-51,81,81,-50,81,-40,]),'CONS':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,59,60,61,83,84,85,86,87,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,132,133,134,138,139,140,142,144,],[-37,82,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,82,82,82,82,-76,-42,-48,82,82,82,-52,-38,82,82,82,82,82,82,82,82,82,-67,-68,-69,-70,-71,-72,-73,-74,82,-57,-77,-39,-41,82,-49,-51,82,82,-50,82,-40,]),'COMMA':([31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,57,58,62,83,84,85,86,87,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,126,129,131,132,133,134,139,140,144,],[-37,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-53,91,96,-76,-42,-48,119,-58,-52,-38,130,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-57,-77,96,-39,-41,119,-49,-51,130,-50,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,4,],[2,8,]),'block':([0,2,93,94,98,127,135,],[3,7,124,125,128,137,141,]),'function':([0,4,],[4,4,]),'statements':([5,11,],[9,23,]),'statement':([5,11,],[11,11,]),'assign_statement':([5,11,],[12,12,]),'print_statement':([5,11,],[13,13,]),'if_statement':([5,11,],[14,14,]),'if_else_statement':([5,11,],[15,15,]),'while_loop_statement':([5,11,],[16,16,]),'list_expr':([17,24,26,27,28,29,32,48,52,53,55,58,59,60,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,87,88,89,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,128,130,132,137,138,139,142,],[25,39,39,39,39,39,83,39,39,39,39,83,83,83,83,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,83,83,83,39,83,39,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,39,83,39,39,83,39,83,83,83,]),'expression':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[32,58,59,60,61,84,86,87,89,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,58,132,138,139,142,]),'number_expr':([24,26,27,28,29,48,52,53,54,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[33,33,33,33,33,33,33,33,88,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'name_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'uminus_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'boolean_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'string_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'tuple_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'paren_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'lop_single_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'midop_double_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'indexing_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'tuple_indexing_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'function_call_expr':([24,26,27,28,29,48,52,53,55,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,88,91,119,128,130,137,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'list_expr_body':([26,91,],[56,122,]),'p_tuple_expr_tail':([52,119,],[85,133,]),'function_withpara_tail':([62,126,],[95,136,]),'function_call_expr_tail':([100,139,],[129,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions block','program',2,'p_progran_withfun','aparser.py',545),
  ('program -> block','program',1,'p_program_nofun','aparser.py',549),
  ('functions -> function functions','functions',2,'p_functions','aparser.py',553),
  ('functions -> function','functions',1,'p_functions','aparser.py',554),
  ('function -> FUNCTION NAME LPAREN RPAREN ASSIGN block expression SEMICOLON','function',8,'p_function_nopara','aparser.py',557),
  ('function -> FUNCTION NAME LPAREN NAME function_withpara_tail','function',5,'p_function_withpara','aparser.py',561),
  ('function_withpara_tail -> COMMA NAME function_withpara_tail','function_withpara_tail',3,'p_function_withpara_tail_1','aparser.py',565),
  ('function_withpara_tail -> RPAREN ASSIGN block expression SEMICOLON','function_withpara_tail',5,'p_function_withpara_tail_2','aparser.py',570),
  ('block -> LBLOCK statements RBLOCK','block',3,'p_block','aparser.py',577),
  ('block -> LBLOCK RBLOCK','block',2,'p_block_empty','aparser.py',581),
  ('statements -> statement statements','statements',2,'p_statements','aparser.py',585),
  ('statements -> statement','statements',1,'p_statements','aparser.py',586),
  ('statement -> assign_statement','statement',1,'p_statement','aparser.py',593),
  ('statement -> print_statement','statement',1,'p_statement','aparser.py',594),
  ('statement -> if_statement','statement',1,'p_statement','aparser.py',595),
  ('statement -> if_else_statement','statement',1,'p_statement','aparser.py',596),
  ('statement -> while_loop_statement','statement',1,'p_statement','aparser.py',597),
  ('assign_statement -> NAME ASSIGN expression SEMICOLON','assign_statement',4,'p_assign_statement','aparser.py',601),
  ('assign_statement -> NAME list_expr ASSIGN expression SEMICOLON','assign_statement',5,'p_assign_statement_list','aparser.py',605),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','aparser.py',609),
  ('if_statement -> IF LPAREN expression RPAREN block','if_statement',5,'p_if_statement','aparser.py',613),
  ('if_else_statement -> IF LPAREN expression RPAREN block ELSE block','if_else_statement',7,'p_if_else_statement','aparser.py',617),
  ('while_loop_statement -> WHILE LPAREN expression RPAREN block','while_loop_statement',5,'p_while_loop_statement','aparser.py',621),
  ('expression -> number_expr','expression',1,'p_expression','aparser.py',625),
  ('expression -> name_expr','expression',1,'p_expression','aparser.py',626),
  ('expression -> uminus_expr','expression',1,'p_expression','aparser.py',627),
  ('expression -> boolean_expr','expression',1,'p_expression','aparser.py',628),
  ('expression -> string_expr','expression',1,'p_expression','aparser.py',629),
  ('expression -> tuple_expr','expression',1,'p_expression','aparser.py',630),
  ('expression -> list_expr','expression',1,'p_expression','aparser.py',631),
  ('expression -> paren_expr','expression',1,'p_expression','aparser.py',632),
  ('expression -> lop_single_expr','expression',1,'p_expression','aparser.py',633),
  ('expression -> midop_double_expr','expression',1,'p_expression','aparser.py',634),
  ('expression -> indexing_expr','expression',1,'p_expression','aparser.py',635),
  ('expression -> tuple_indexing_expr','expression',1,'p_expression','aparser.py',636),
  ('expression -> function_call_expr','expression',1,'p_expression','aparser.py',637),
  ('name_expr -> NAME','name_expr',1,'p_name_expr','aparser.py',641),
  ('function_call_expr -> NAME LPAREN RPAREN','function_call_expr',3,'p_function_call_expr_nopara','aparser.py',645),
  ('function_call_expr -> NAME LPAREN expression function_call_expr_tail','function_call_expr',4,'p_function_call_expr_multipara','aparser.py',649),
  ('function_call_expr_tail -> COMMA expression function_call_expr_tail','function_call_expr_tail',3,'p_function_call_expr_tail_1','aparser.py',653),
  ('function_call_expr_tail -> RPAREN','function_call_expr_tail',1,'p_function_call_expr_tail_2','aparser.py',657),
  ('uminus_expr -> MINUS expression','uminus_expr',2,'p_uminus_expr','aparser.py',661),
  ('number_expr -> INTNUM','number_expr',1,'p_number_expr','aparser.py',665),
  ('number_expr -> REALNUM','number_expr',1,'p_number_expr','aparser.py',666),
  ('boolean_expr -> TRUE','boolean_expr',1,'p_boolean_expr','aparser.py',670),
  ('boolean_expr -> FALSE','boolean_expr',1,'p_boolean_expr','aparser.py',671),
  ('string_expr -> STRING','string_expr',1,'p_string_expr','aparser.py',675),
  ('tuple_expr -> LPAREN p_tuple_expr_tail','tuple_expr',2,'p_tuple_expr','aparser.py',679),
  ('p_tuple_expr_tail -> expression COMMA p_tuple_expr_tail','p_tuple_expr_tail',3,'p_tuple_expr_tail','aparser.py',683),
  ('p_tuple_expr_tail -> expression COMMA expression RPAREN','p_tuple_expr_tail',4,'p_tuple_expr_tail','aparser.py',684),
  ('p_tuple_expr_tail -> expression COMMA RPAREN','p_tuple_expr_tail',3,'p_tuple_expr_tail','aparser.py',685),
  ('list_expr -> LBRACKET list_expr_body RBRACKET','list_expr',3,'p_list_expr','aparser.py',694),
  ('list_expr -> LBRACKET RBRACKET','list_expr',2,'p_list_expr','aparser.py',695),
  ('list_expr_body -> expression COMMA list_expr_body','list_expr_body',3,'p_list_expr_body','aparser.py',702),
  ('list_expr_body -> expression','list_expr_body',1,'p_list_expr_body','aparser.py',703),
  ('list_expr_body -> expression COMMA','list_expr_body',2,'p_list_expr_body','aparser.py',704),
  ('paren_expr -> LPAREN expression RPAREN','paren_expr',3,'p_paren_expr','aparser.py',711),
  ('lop_single_expr -> NOT expression','lop_single_expr',2,'p_lop_single_expr','aparser.py',715),
  ('midop_double_expr -> expression ORELSE expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',719),
  ('midop_double_expr -> expression ANDALSO expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',720),
  ('midop_double_expr -> expression LT expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',721),
  ('midop_double_expr -> expression LEQ expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',722),
  ('midop_double_expr -> expression EQU expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',723),
  ('midop_double_expr -> expression NEQ expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',724),
  ('midop_double_expr -> expression GEQ expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',725),
  ('midop_double_expr -> expression GT expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',726),
  ('midop_double_expr -> expression PLUS expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',727),
  ('midop_double_expr -> expression MINUS expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',728),
  ('midop_double_expr -> expression TIMES expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',729),
  ('midop_double_expr -> expression DIVIDE expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',730),
  ('midop_double_expr -> expression DIV expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',731),
  ('midop_double_expr -> expression MOD expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',732),
  ('midop_double_expr -> expression EXPONENT expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',733),
  ('midop_double_expr -> expression IN expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',734),
  ('midop_double_expr -> expression CONS expression','midop_double_expr',3,'p_midop_double_expr','aparser.py',735),
  ('indexing_expr -> expression list_expr','indexing_expr',2,'p_indexing_expr','aparser.py',739),
  ('tuple_indexing_expr -> HASHTAG number_expr expression','tuple_indexing_expr',3,'p_tuple_indexing_expr','aparser.py',743),
]
